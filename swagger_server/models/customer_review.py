# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from database.dbmodels.customer_review_dbmodel import CustomerReviewDbModel
from swagger_server.models.base_model_ import Model
from swagger_server import util


class CustomerReview(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, review_id: str=None, customer_id: str=None, author_id: str=None, rating: int=None, description: str=None):  # noqa: E501
        """CustomerReview - a model defined in Swagger

        :param review_id: The review_id of this CustomerReview.  # noqa: E501
        :type review_id: str
        :param customer_id: The customer_id of this CustomerReview.  # noqa: E501
        :type customer_id: str
        :param author_id: The author_id of this CustomerReview.  # noqa: E501
        :type author_id: str
        :param rating: The rating of this CustomerReview.  # noqa: E501
        :type rating: int
        :param description: The description of this CustomerReview.  # noqa: E501
        :type description: str
        """
        self.swagger_types = {
            'review_id': str,
            'customer_id': str,
            'author_id': str,
            'rating': int,
            'description': str
        }

        self.attribute_map = {
            'review_id': 'review_id',
            'customer_id': 'customer_id',
            'author_id': 'author_id',
            'rating': 'rating',
            'description': 'description'
        }
        self._review_id = review_id
        self._customer_id = customer_id
        self._author_id = author_id
        self._rating = rating
        self._description = description

    @classmethod
    def from_dict(cls, dikt) -> 'CustomerReview':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CustomerReview of this CustomerReview.  # noqa: E501
        :rtype: CustomerReview
        """
        return util.deserialize_model(dikt, cls)

    @property
    def review_id(self) -> str:
        """Gets the review_id of this CustomerReview.


        :return: The review_id of this CustomerReview.
        :rtype: str
        """
        return self._review_id

    @review_id.setter
    def review_id(self, review_id: str):
        """Sets the review_id of this CustomerReview.


        :param review_id: The review_id of this CustomerReview.
        :type review_id: str
        """

        self._review_id = review_id

    @property
    def customer_id(self) -> str:
        """Gets the customer_id of this CustomerReview.


        :return: The customer_id of this CustomerReview.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id: str):
        """Sets the customer_id of this CustomerReview.


        :param customer_id: The customer_id of this CustomerReview.
        :type customer_id: str
        """
        if customer_id is None:
            raise ValueError("Invalid value for `customer_id`, must not be `None`")  # noqa: E501

        self._customer_id = customer_id

    @property
    def author_id(self) -> str:
        """Gets the author_id of this CustomerReview.


        :return: The author_id of this CustomerReview.
        :rtype: str
        """
        return self._author_id

    @author_id.setter
    def author_id(self, author_id: str):
        """Sets the author_id of this CustomerReview.


        :param author_id: The author_id of this CustomerReview.
        :type author_id: str
        """
        if author_id is None:
            raise ValueError("Invalid value for `author_id`, must not be `None`")  # noqa: E501

        self._author_id = author_id

    @property
    def rating(self) -> int:
        """Gets the rating of this CustomerReview.


        :return: The rating of this CustomerReview.
        :rtype: int
        """
        return self._rating

    @rating.setter
    def rating(self, rating: int):
        """Sets the rating of this CustomerReview.


        :param rating: The rating of this CustomerReview.
        :type rating: int
        """
        allowed_values = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]  # noqa: E501
        if rating not in allowed_values:
            raise ValueError(
                "Invalid value for `rating` ({0}), must be one of {1}"
                .format(rating, allowed_values)
            )

        self._rating = rating

    @property
    def description(self) -> str:
        """Gets the description of this CustomerReview.


        :return: The description of this CustomerReview.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this CustomerReview.


        :param description: The description of this CustomerReview.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    def toCustomerReviewDbModel(self):
        customer_review_dbmodel = CustomerReviewDbModel()
        customer_review_dbmodel.customer_id = self.customer_id
        customer_review_dbmodel.author_id = self.author_id
        customer_review_dbmodel.rating = self.rating
        customer_review_dbmodel.description = self.description
        return customer_review_dbmodel

    def fromCustomerReviewDbModel(self, customer_review_dbmodel):
        self.review_id = customer_review_dbmodel.id
        self.customer_id = customer_review_dbmodel.customer_id
        self.author_id = customer_review_dbmodel.author_id
        self.rating = customer_review_dbmodel.rating
        self.description = customer_review_dbmodel.description
