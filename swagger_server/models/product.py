# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from database.dbmodels.product_dbmodel import ProductDbModel
from swagger_server.models.base_model_ import Model
from swagger_server import util


class Product(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, product_id: str=None, baker_id: str=None, title: str=None, price: str=None, description: str=None, ingredients: str=None, execution: str=None, status: str=None, rating: float=None, reviews_quantity: int=None):  # noqa: E501
        """Product - a model defined in Swagger

        :param product_id: The product_id of this Product.  # noqa: E501
        :type product_id: str
        :param baker_id: The baker_id of this Product.  # noqa: E501
        :type baker_id: str
        :param title: The title of this Product.  # noqa: E501
        :type title: str
        :param price: The price of this Product.  # noqa: E501
        :type price: str
        :param description: The description of this Product.  # noqa: E501
        :type description: str
        :param ingredients: The ingredients of this Product.  # noqa: E501
        :type ingredients: str
        :param execution: The execution of this Product.  # noqa: E501
        :type execution: str
        :param status: The status of this Product.  # noqa: E501
        :type status: str
        :param rating: The rating of this Product.  # noqa: E501
        :type rating: float
        :param reviews_quantity: The reviews_quantity of this Product.  # noqa: E501
        :type reviews_quantity: int
        """
        self.swagger_types = {
            'product_id': str,
            'baker_id': str,
            'title': str,
            'price': str,
            'description': str,
            'ingredients': str,
            'execution': str,
            'status': str,
            'rating': float,
            'reviews_quantity': int
        }

        self.attribute_map = {
            'product_id': 'product_id',
            'baker_id': 'baker_id',
            'title': 'title',
            'price': 'price',
            'description': 'description',
            'ingredients': 'ingredients',
            'execution': 'execution',
            'status': 'status',
            'rating': 'rating',
            'reviews_quantity': 'reviews_quantity'
        }
        self._product_id = product_id
        self._baker_id = baker_id
        self._title = title
        self._price = price
        self._description = description
        self._ingredients = ingredients
        self._execution = execution
        self._status = status
        self._rating = rating
        self._reviews_quantity = reviews_quantity

    @classmethod
    def from_dict(cls, dikt) -> 'Product':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Product of this Product.  # noqa: E501
        :rtype: Product
        """
        return util.deserialize_model(dikt, cls)

    @property
    def product_id(self) -> str:
        """Gets the product_id of this Product.


        :return: The product_id of this Product.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id: str):
        """Sets the product_id of this Product.


        :param product_id: The product_id of this Product.
        :type product_id: str
        """

        self._product_id = product_id

    @property
    def baker_id(self) -> str:
        """Gets the baker_id of this Product.


        :return: The baker_id of this Product.
        :rtype: str
        """
        return self._baker_id

    @baker_id.setter
    def baker_id(self, baker_id: str):
        """Sets the baker_id of this Product.


        :param baker_id: The baker_id of this Product.
        :type baker_id: str
        """
        if baker_id is None:
            raise ValueError("Invalid value for `baker_id`, must not be `None`")  # noqa: E501

        self._baker_id = baker_id

    @property
    def title(self) -> str:
        """Gets the title of this Product.


        :return: The title of this Product.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this Product.


        :param title: The title of this Product.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def price(self) -> str:
        """Gets the price of this Product.


        :return: The price of this Product.
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price: str):
        """Sets the price of this Product.


        :param price: The price of this Product.
        :type price: str
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def description(self) -> str:
        """Gets the description of this Product.


        :return: The description of this Product.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Product.


        :param description: The description of this Product.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def ingredients(self) -> str:
        """Gets the ingredients of this Product.


        :return: The ingredients of this Product.
        :rtype: str
        """
        return self._ingredients

    @ingredients.setter
    def ingredients(self, ingredients: str):
        """Sets the ingredients of this Product.


        :param ingredients: The ingredients of this Product.
        :type ingredients: str
        """
        if ingredients is None:
            raise ValueError("Invalid value for `ingredients`, must not be `None`")  # noqa: E501

        self._ingredients = ingredients

    @property
    def execution(self) -> str:
        """Gets the execution of this Product.


        :return: The execution of this Product.
        :rtype: str
        """
        return self._execution

    @execution.setter
    def execution(self, execution: str):
        """Sets the execution of this Product.


        :param execution: The execution of this Product.
        :type execution: str
        """
        if execution is None:
            raise ValueError("Invalid value for `execution`, must not be `None`")  # noqa: E501

        self._execution = execution

    @property
    def status(self) -> str:
        """Gets the status of this Product.


        :return: The status of this Product.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this Product.


        :param status: The status of this Product.
        :type status: str
        """
        allowed_values = ["available", "not available"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def rating(self) -> float:
        """Gets the rating of this Product.


        :return: The rating of this Product.
        :rtype: float
        """
        return self._rating

    @rating.setter
    def rating(self, rating: float):
        """Sets the rating of this Product.


        :param rating: The rating of this Product.
        :type rating: float
        """

        self._rating = rating

    @property
    def reviews_quantity(self) -> int:
        """Gets the reviews_quantity of this Product.


        :return: The reviews_quantity of this Product.
        :rtype: int
        """
        return self._reviews_quantity

    @reviews_quantity.setter
    def reviews_quantity(self, reviews_quantity: int):
        """Sets the reviews_quantity of this Product.


        :param reviews_quantity: The reviews_quantity of this Product.
        :type reviews_quantity: int
        """

        self._reviews_quantity = reviews_quantity

    def toProductDbModel(self):
        product_dbmodel = ProductDbModel()
        product_dbmodel.baker_id = self.baker_id
        product_dbmodel.title = self.title
        product_dbmodel.price = self.price
        product_dbmodel.description = self.description
        product_dbmodel.status = self.status
        product_dbmodel.ingredients = self.ingredients
        product_dbmodel.execution = self.execution
        product_dbmodel.rating = self.rating
        return product_dbmodel

    def fromProductDbModel(self, product_dbmodel):
        self.product_id = str(product_dbmodel.id)
        self.baker_id = product_dbmodel.baker_id
        self.title = product_dbmodel.title
        self.price = product_dbmodel.price
        self.status = product_dbmodel.status
        self.description = product_dbmodel.description
        self.ingredients = product_dbmodel.ingredients
        self.execution = product_dbmodel.execution
        self.rating = product_dbmodel.rating
