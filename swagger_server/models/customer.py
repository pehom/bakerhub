# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from database.dbmodels.customer_dbmodel import CustomerDbModel
from swagger_server.models.base_model_ import Model
from swagger_server import util


class Customer(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, customer_id: str=None, name: str=None, contact: str=None, rating: float=None, status: str=None):  # noqa: E501
        """Customer - a model defined in Swagger

        :param customer_id: The customer_id of this Customer.  # noqa: E501
        :type customer_id: str
        :param name: The name of this Customer.  # noqa: E501
        :type name: str
        :param contact: The contact of this Customer.  # noqa: E501
        :type contact: str
        :param rating: The rating of this Customer.  # noqa: E501
        :type rating: float
        :param status: The status of this Customer.  # noqa: E501
        :type status: str
        """
        self.swagger_types = {
            'customer_id': str,
            'name': str,
            'contact': str,
            'rating': float,
            'status': str
        }

        self.attribute_map = {
            'customer_id': 'customer_id',
            'name': 'name',
            'contact': 'contact',
            'rating': 'rating',
            'status': 'status'
        }
        self._customer_id = customer_id
        self._name = name
        self._contact = contact
        self._rating = rating
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> 'Customer':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Customer of this Customer.  # noqa: E501
        :rtype: Customer
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customer_id(self) -> str:
        """Gets the customer_id of this Customer.


        :return: The customer_id of this Customer.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id: str):
        """Sets the customer_id of this Customer.


        :param customer_id: The customer_id of this Customer.
        :type customer_id: str
        """

        self._customer_id = customer_id

    @property
    def name(self) -> str:
        """Gets the name of this Customer.


        :return: The name of this Customer.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Customer.


        :param name: The name of this Customer.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def contact(self) -> str:
        """Gets the contact of this Customer.


        :return: The contact of this Customer.
        :rtype: str
        """
        return self._contact

    @contact.setter
    def contact(self, contact: str):
        """Sets the contact of this Customer.


        :param contact: The contact of this Customer.
        :type contact: str
        """
        if contact is None:
            raise ValueError("Invalid value for `contact`, must not be `None`")  # noqa: E501

        self._contact = contact

    @property
    def rating(self) -> float:
        """Gets the rating of this Customer.


        :return: The rating of this Customer.
        :rtype: float
        """
        return self._rating

    @rating.setter
    def rating(self, rating: float):
        """Sets the rating of this Customer.


        :param rating: The rating of this Customer.
        :type rating: float
        """

        self._rating = rating

    @property
    def status(self) -> str:
        """Gets the status of this Customer.


        :return: The status of this Customer.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this Customer.


        :param status: The status of this Customer.
        :type status: str
        """
        allowed_values = ["active", "not active", "banned"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    def toCustomerDbModel(self):
        customer_db_model = CustomerDbModel()
        customer_db_model.name = self.name
        customer_db_model.contact = self.contact
        customer_db_model.status = self.status
        customer_db_model.rating = self.rating
        return customer_db_model

    def fromCustomerDbModel(self, customer_db_model):
        self.customer_id = str(customer_db_model.id)
        self.name = customer_db_model.name
        self.contact = customer_db_model.contact
        self.rating = customer_db_model.rating
        self.status = customer_db_model.status
