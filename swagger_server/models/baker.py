# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from database.dbmodels.baker_dbmodel import BakerDbModel
from swagger_server.models.base_model_ import Model
from swagger_server import util


class Baker(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, baker_id: str=None, name: str=None, contact: str=None, status: str=None, rating: float=None, finished_orders: int=None):  # noqa: E501
        """Baker - a model defined in Swagger

        :param baker_id: The baker_id of this Baker.  # noqa: E501
        :type baker_id: str
        :param name: The name of this Baker.  # noqa: E501
        :type name: str
        :param contact: The contact of this Baker.  # noqa: E501
        :type contact: str
        :param status: The status of this Baker.  # noqa: E501
        :type status: str
        :param rating: The rating of this Baker.  # noqa: E501
        :type rating: float
        :param finished_orders: The finished_orders of this Baker.  # noqa: E501
        :type finished_orders: int
        """
        self.swagger_types = {
            'baker_id': str,
            'name': str,
            'contact': str,
            'status': str,
            'rating': float,
            'finished_orders': int
        }

        self.attribute_map = {
            'baker_id': 'baker_id',
            'name': 'name',
            'contact': 'contact',
            'status': 'status',
            'rating': 'rating',
            'finished_orders': 'finished_orders'
        }
        self._baker_id = baker_id
        self._name = name
        self._contact = contact
        self._status = status
        self._rating = rating
        self._finished_orders = finished_orders

    @classmethod
    def from_dict(cls, dikt) -> 'Baker':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Baker of this Baker.  # noqa: E501
        :rtype: Baker
        """
        return util.deserialize_model(dikt, cls)

    @property
    def baker_id(self) -> str:
        """Gets the baker_id of this Baker.


        :return: The baker_id of this Baker.
        :rtype: str
        """
        return self._baker_id

    @baker_id.setter
    def baker_id(self, baker_id: str):
        """Sets the baker_id of this Baker.


        :param baker_id: The baker_id of this Baker.
        :type baker_id: str
        """

        self._baker_id = baker_id

    @property
    def name(self) -> str:
        """Gets the name of this Baker.


        :return: The name of this Baker.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Baker.


        :param name: The name of this Baker.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def contact(self) -> str:
        """Gets the contact of this Baker.


        :return: The contact of this Baker.
        :rtype: str
        """
        return self._contact

    @contact.setter
    def contact(self, contact: str):
        """Sets the contact of this Baker.


        :param contact: The contact of this Baker.
        :type contact: str
        """
        if contact is None:
            raise ValueError("Invalid value for `contact`, must not be `None`")  # noqa: E501

        self._contact = contact

    @property
    def status(self) -> str:
        """Gets the status of this Baker.


        :return: The status of this Baker.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this Baker.


        :param status: The status of this Baker.
        :type status: str
        """
        allowed_values = ["active", "not active", "deleted"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def rating(self) -> float:
        """Gets the rating of this Baker.


        :return: The rating of this Baker.
        :rtype: float
        """
        return self._rating

    @rating.setter
    def rating(self, rating: float):
        """Sets the rating of this Baker.


        :param rating: The rating of this Baker.
        :type rating: float
        """

        self._rating = rating

    @property
    def finished_orders(self) -> int:
        """Gets the finished_orders of this Baker.


        :return: The finished_orders of this Baker.
        :rtype: int
        """
        return self._finished_orders

    @finished_orders.setter
    def finished_orders(self, finished_orders: int):
        """Sets the finished_orders of this Baker.


        :param finished_orders: The finished_orders of this Baker.
        :type finished_orders: int
        """

        self._finished_orders = finished_orders

    def toBakerDbModel(self):
        baker_db_model = BakerDbModel()
        baker_db_model.name = self.name
        baker_db_model.status = self.status
        baker_db_model.rating = self.rating
        baker_db_model.contact = self.contact
        baker_db_model.finished_orders = self.finished_orders
        baker_db_model.reviews_quantity = 0
        return baker_db_model

    def fromBakerDbModel(self, baker_db):
        self.baker_id = baker_db.id
        self.name = baker_db.name
        self.contact = baker_db.contact
        self.status = baker_db.status
        self.rating = baker_db.rating
        self.finished_orders = baker_db.finished_orders
