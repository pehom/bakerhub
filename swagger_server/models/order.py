# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from database.dbmodels.order_dbmodel import OrderDbModel
from swagger_server.models.base_model_ import Model
from swagger_server import util
from swagger_server.util import listToString, listFromString


class Order(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, order_id: str=None, customer_id: str=None, baker_id: str=None, price: float=None, products: List[str]=None, _date: str=None, status: str=None):  # noqa: E501
        """Order - a model defined in Swagger

        :param order_id: The order_id of this Order.  # noqa: E501
        :type order_id: str
        :param customer_id: The customer_id of this Order.  # noqa: E501
        :type customer_id: str
        :param baker_id: The baker_id of this Order.  # noqa: E501
        :type baker_id: str
        :param price: The price of this Order.  # noqa: E501
        :type price: float
        :param products: The products of this Order.  # noqa: E501
        :type products: List[str]
        :param _date: The _date of this Order.  # noqa: E501
        :type _date: str
        :param status: The status of this Order.  # noqa: E501
        :type status: str
        """
        self.swagger_types = {
            'order_id': str,
            'customer_id': str,
            'baker_id': str,
            'price': float,
            'products': List[str],
            '_date': str,
            'status': str
        }

        self.attribute_map = {
            'order_id': 'order_id',
            'customer_id': 'customer_id',
            'baker_id': 'baker_id',
            'price': 'price',
            'products': 'products',
            '_date': 'date',
            'status': 'status'
        }
        self._order_id = order_id
        self._customer_id = customer_id
        self._baker_id = baker_id
        self._price = price
        self._products = products
        self.__date = _date
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> 'Order':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Order of this Order.  # noqa: E501
        :rtype: Order
        """
        return util.deserialize_model(dikt, cls)

    @property
    def order_id(self) -> str:
        """Gets the order_id of this Order.


        :return: The order_id of this Order.
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id: str):
        """Sets the order_id of this Order.


        :param order_id: The order_id of this Order.
        :type order_id: str
        """

        self._order_id = order_id

    @property
    def customer_id(self) -> str:
        """Gets the customer_id of this Order.


        :return: The customer_id of this Order.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id: str):
        """Sets the customer_id of this Order.


        :param customer_id: The customer_id of this Order.
        :type customer_id: str
        """
        if customer_id is None:
            raise ValueError("Invalid value for `customer_id`, must not be `None`")  # noqa: E501

        self._customer_id = customer_id

    @property
    def baker_id(self) -> str:
        """Gets the baker_id of this Order.


        :return: The baker_id of this Order.
        :rtype: str
        """
        return self._baker_id

    @baker_id.setter
    def baker_id(self, baker_id: str):
        """Sets the baker_id of this Order.


        :param baker_id: The baker_id of this Order.
        :type baker_id: str
        """
        if baker_id is None:
            raise ValueError("Invalid value for `baker_id`, must not be `None`")  # noqa: E501

        self._baker_id = baker_id

    @property
    def price(self) -> float:
        """Gets the price of this Order.


        :return: The price of this Order.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price: float):
        """Sets the price of this Order.


        :param price: The price of this Order.
        :type price: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def products(self) -> List[str]:
        """Gets the products of this Order.


        :return: The products of this Order.
        :rtype: List[str]
        """
        return self._products

    @products.setter
    def products(self, products: List[str]):
        """Sets the products of this Order.


        :param products: The products of this Order.
        :type products: List[str]
        """
        if products is None:
            raise ValueError("Invalid value for `products`, must not be `None`")  # noqa: E501

        self._products = products

    @property
    def _date(self) -> str:
        """Gets the _date of this Order.


        :return: The _date of this Order.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date: str):
        """Sets the _date of this Order.


        :param _date: The _date of this Order.
        :type _date: str
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def status(self) -> str:
        """Gets the status of this Order.


        :return: The status of this Order.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this Order.


        :param status: The status of this Order.
        :type status: str
        """
        allowed_values = ["ready", "in progress", "declined", "finished"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    def toOrderDbModel(self):
        order_db_model = OrderDbModel()
        order_db_model.customer_id = self.customer_id
        order_db_model.baker_id = self.baker_id
        order_db_model.price = self.price
        order_db_model.products = listToString(self.products)
        order_db_model.start_date = self._date
        order_db_model.status = self.status
        return order_db_model

    def fromOrderDbModel(self, order_db_model):
        self.order_id = str(order_db_model.id)
        self.customer_id = order_db_model.customer_id
        self.baker_id = order_db_model.baker_id
        self.price = order_db_model.price
        self.products = listFromString(order_db_model.products)
        self._date = order_db_model.start_date
        self.status = order_db_model.status

